---
title: "Soil Analysis"
subtitle: "Project Effect Fire Dung Beetle"
author: "David Vanegas-Alarcón"
format:
  #html:
  pdf:
  #docx: 
    theme: Minty
    light: flatly
    fontsize: 9pt
editor: visual
date: "`r Sys.Date()`"
date-format: long
---

# Read data

```{r echo=FALSE, message=FALSE, warning=FALSE}
library(multcomp) # Simultaneous Inference in General Parametric Models CRAN v1.4-25
library(lme4) # Linear Mixed-Effects Models using 'Eigen' and S4 CRAN v1.1-35.2
library(lmtest) # Testing Linear Regression Models CRAN v0.9-40
library(lattice) # Trellis Graphics for R CRAN v0.21-9
library(tidyverse) # Easily Install and Load the 'Tidyverse' CRAN v2.0.0 
library(emmeans) # Estimated Marginal Means, aka Least-Squares Means CRAN v1.10.1
library(ggeffects) # Create Tidy Data Frames of Marginal Effects for 'ggplot' from Model Outputs CRAN v1.6.0
library(psych) # Procedures for Psychological, Psychometric, and Personality Research CRAN v2.4.3
library(ggridges) # Ridgeline Plots in 'ggplot2' CRAN v0.5.6
library(lazyWeave) # LaTeX Wrappers for R Users CRAN v3.0.2 
library(cowplot) # Streamlined Plot Theme and Plot Annotations for 'ggplot2' CRAN v1.1.3
library(data.table) # Extension of `data.frame` CRAN v1.15.4
library(ggpubr) # 'ggplot2' Based Publication Ready Plots CRAN v0.6.0
library(MASS) # Support Functions and Datasets for Venables and Ripley's MASS CRAN v7.3-60
library(car) # Companion to Applied Regression CRAN v3.1-2
library(stats) 
library(summarytools) # Tools to Quickly and Neatly Summarize Data CRAN v1.0.1
library(GGally) # Extension to 'ggplot2' CRAN v2.2.1
```

Read data from "DataGLM.csv".

```{r}
ACC <- read.csv("ACC/DataACC.csv", header = T, sep = ";")
GLMSoil <- read.csv("ACC/DataACC.csv", header = T, sep = ";")

## Convert factor
ACC$FireRegime <- factor(ACC$FireRegime, 
                           levels = c("Null", "Low", "High"))

ACC$Cover <- factor(ACC$Cover, levels = c("Secondary Forest", 
                                                "Biodiverse pasture",
                                                "Grass Monoculture"))

GLMSoil$FireRegime <- factor(ACC$FireRegime, 
                           levels = c("Null", "Low", "High"))

GLMSoil$Cover <- factor(ACC$Cover, levels = c("Secondary Forest", 
                                                "Biodiverse pasture",
                                                "Grass Monoculture"))
```

# Data exploration and visualization

Empezamos a realizar un análisis exploratorio previo sobre estos.

```{r}
# Data soil
dim(ACC)
names(ACC)
```

Posteriormente vamos a utilizar la función $describe()$ del paquete $psych$ para conocer las características de nuestros datos.

```{r}
# Describe soil
ACCDescribe <- describe(ACC)
ACCDescribe
```

Como podemos observar la salida de la función nos permite realizar algunas inferencias en relación con los datos presentados. Así mismo, podemos ver que los valores del $sesgo$ y $kurtosis$ nos sugieren un comportamiento de una distribuciones con sesgos negativos (*DA* ) y positivos (*pH*, *K_int*, *Humidity*, *Ca_int*, *CIC*, *MO*, *Abundance* y *Richness*), leptocúrtica (*pH* y *K_int*) y platicúrticas (*Humidity*, *Ca_int*, *CIC*, *DA*, *MO*, *Abundance* y *Richness*).

```{r}
# Función para buscar NA´s en Soil
summary(is.na(ACC))
```

Observando la presencia de datos faltantes o *NA´s*, podemos ver que ninguna de las variables posee este tipo de datos.

# Análisis de correspondencia canónica

```{r}
diversity <- ACC[, 4:5]
soil <- ACC[, 6:12]
```

```{r message = FALSE, warning = FALSE, echo = FALSE, fig.width=10, fig.height=7}
ggduo(ACC,columnsX = 4:5,columnsY = 6:12,
      types = list(continuous = "smooth_lm"),
      title = "Correlación entre variables fisiológicas y  deportivas",
)
```

```{r message = FALSE, warning = FALSE, echo = FALSE, fig.width=10, fig.height=7}
ggpairs(soil)
```

```{r}
cc1 <- CCA::cc(diversity, soil)
cc1$cor
```

```{r message = FALSE, warning = FALSE, echo = FALSE, fig.width=10, fig.height=7}
plot(cc1$scores$xscores[,1],cc1$scores$yscores[,1], xlab = "score x", ylab = "score y")
grid(lty = 1)
```

```{r message = FALSE, warning = FALSE, echo = FALSE, fig.width=10, fig.height=7}
plot(cc1$scores$xscores[,2],cc1$scores$yscores[,2], xlab = "score x", ylab = "score y")
grid(lty = 1)
```

```{r}
cc1
```

```{r message = FALSE, warning = FALSE, echo = FALSE, fig.width=10, fig.height=7}
cc <- vegan::cca(diversity, soil)
plot(cc)
grid(lty = 1)
```

```{r message = FALSE, warning = FALSE, echo = FALSE, fig.width=10, fig.height=7}
CCA::plt.cc(CCA::cc(diversity, soil), var.label = TRUE)
```

# Modelo pH

Analizaremos la cantidad de $outliers$ para la variable *pH*

```{r }
boxplot.stats(GLMSoil$pH)$out
```

Para apoyar el análisis de datos, realizaremos un gráfico para poder observar la disposición de la distribución de los datos.

```{r message = FALSE, warning = FALSE, echo = FALSE, fig.width=10, fig.height=7, eval=FALSE}
plot1 <- GLMSoil |> 
  ggplot(aes(x = FireRegime, y = pH))+
  geom_boxplot()+
  theme_minimal(base_size = 15) +
  theme(panel.border = element_rect(fill = NA, colour = "grey40"))+
  theme(strip.text = element_text(face = "italic"))+
  theme(legend.position = "none")+
  geom_point(alpha = 0.3, 
             position=position_jitter(width = .2), color = "cyan4")

plot1
```

Los gráficos cuantil cuantil *(quantile-quantile (qq))* son una ayuda para explorar si un conjunto de datos o muestra proviene de una población con cierta distribución, en nuestro caso, exploraremos algún comportamiento en relación con su sesgo y su distribución.

```{r message = FALSE, warning = FALSE, echo = FALSE, fig.width=10, fig.height=7}
# Convertimos la base de datos en una disposición larga
GLMSoills <- GLMSoil  |> 
  gather(Variable, Total, "pH") |> 
  as.data.frame()

GLMSoills |> 
  ggplot(aes(sample = Total), fill = Variable)+
  stat_qq() +
  stat_qq_line()+
  facet_wrap(.~ Variable, scales = "free")+
  theme_minimal(base_size = 15) +
  theme(panel.border = element_rect(fill = NA, colour = "grey40"))+
  theme(legend.position = "none")+
  xlab("Cuantiles teóricos")+
  ylab("Cuantiles de muestra")
```

## Relación entre el pH y el Régimen de quemas

### Modelo nulo

```{r }
nullpHDB <- glm(pH ~ 1, family = gaussian(),
             data = GLMSoil)
summary(nullpHDB)
```

### Modelo *pH \~ FireRegimen + Cover*

Luego procederemos a realizar un modelo entre las variables *pH* y *FireRegimen + Cover*. Esto con el fin de poder conocer una posible asociación entre las variables.

```{r }
pHDB <- glm(pH ~ FireRegime + Cover, family = gaussian(),
             data = GLMSoil)
summary(pHDB)
```

Sin embargo, vamos a validar el modelo de regresión a partir de los gráficos de los residuales.

```{r warning=FALSE, message=FALSE, echo=FALSE, fig.width=10, fig.height=7}
par(mfrow=c(2, 2))
plot(pHDB)
```

```{r }
shapiro.test(pHDB$residuals)
```

```{r }
result <-  fligner.test(pH ~ interaction(FireRegime, Cover), data = GLMSoil) 

print(result)
```

## Interpretación de los Resultados

Intercepto ($\beta_0$): 

FireRegimenLow ($\beta_1$): 

FireRegimenHigh ($\beta_2$): 

CoverBiodiverse pasture ($\beta_3$): 

FireRegimenLow ($\beta_4$): 

## Visualización

```{r echo=FALSE, fig.width=15, fig.height=12}
# Effect FireRegimen
GLMSoil2 <- GLMSoil %>%
  mutate(Cover = case_when(
    Cover == "Secondary Forest" ~ "SF",
    Cover == "Biodiverse pasture" ~ "BP",
    Cover == "Grass Monoculture" ~ "GM",
    TRUE ~ Cover  # Keep other values unchanged
  ))%>%
  mutate(Cover = factor(Cover, levels = c("SF", "BP", "GM")))

IndDB <-  glm(pH ~ FireRegime + Cover, data = GLMSoil2)


m1_emm <- emmeans(IndDB, specs = "FireRegime")
m1_pairs <- contrast(m1_emm,
                     method = "revpairwise",
                     adjust = "none") %>%
  summary(infer = TRUE) %>%
  data.table()

m1_pairs[ , p_pretty := pvalString(p.value)]
# also create a column with "p-val: "
m1_pairs[ , pval_pretty := paste("p = ", p_pretty)]
m1_pairs[ , estval_pretty := paste("Est = ", round(estimate, 3))]
m1_pairs[ , zval_pretty := paste("t = ", round(t.ratio, 3))]

contrast_order <- m1_pairs[, contrast]
m1_pairs[, contrast := factor(contrast, contrast_order)]

gg_effect <- ggplot(data = m1_pairs, 
                    aes(y = contrast,
                        x = estimate)) +
  # confidence level of effect
  geom_errorbar(aes(xmin = lower.CL, 
                    xmax = upper.CL),
                width = 0, 
                color = "black") +
  # estimate of effect
  geom_point(size = 3) +
  
  # draw a line at effect = 0
  geom_vline(xintercept = 0, linetype = 2) +
  
  # p-value. The y coordinates are set by eye
  annotate(geom = "text",
           label = m1_pairs$estval_pretty,
           y = 0.7:2.7,
           x = 2.3, size = 3.4) +
   annotate(geom = "text",
           label = m1_pairs$zval_pretty,
           y = 0.7:2.7,
           x = -3, size = 3.4) +
  annotate(geom = "text",
           label = m1_pairs$pval_pretty,
           y = 0.7:2.7,
           x = -1.85, size = 3.4) +
  
  # x-axis label and aesthetics
  xlab("Effect Fire Regime") +
  coord_cartesian(xlim = c(-3.1, 3.1)) +
  scale_y_discrete(position = "right")+
  scale_x_continuous(position="top") +
  theme(axis.title.y = element_blank())+
  theme(panel.border = element_blank(), panel.grid.major = element_blank(),
              panel.grid.minor = element_blank(), 
              axis.line = element_line(colour = "black"))+
        theme(panel.background = element_blank())+
  theme(axis.text.y = element_text(size = 10))

plotDB <- ggplot(GLMSoil, aes(x = FireRegime, y = pH))+
        geom_boxplot(width = 0.6, outlier.shape = NA)+
        geom_point(alpha = 0.3, 
             position=position_jitter(width = .2), color = "cyan4")+
        theme(axis.title.x = element_blank())+
        theme(axis.text.x = element_blank())+
        scale_y_continuous("pH")+
        xlab("Fire Regime")+
        theme(axis.text.x = element_text(size = 14))+
        theme(axis.title.x = element_text(size = 12))+
        theme(axis.text.y = element_text(size = 12))+
        theme(axis.title.y = element_text(size = 14))+
        theme(panel.border = element_blank(), panel.grid.major = element_blank(),
              panel.grid.minor = element_blank(), 
              axis.line = element_line(colour = "black"))+
        theme(panel.background = element_blank())+
        theme(legend.position = "bottom")+
        annotate("text", label = "A", size = 4, x = 1, y = 6)+
        annotate("text", label = "A", size = 4, x = 2, y = 6.5)+
        annotate("text", label = "A", size = 4, x = 3, y = 6.3)

gg <- plot_grid(gg_effect,
                plotDB,
                nrow = 2,
                align = "v",
                label_size = 9,
                axis = "rl",
                rel_heights=c(1, 4)
                )
```

```{r echo=FALSE, fig.width=15, fig.height=12}
# Effect Cover
GLMSoil2 <- GLMSoil %>%
  mutate(Cover = case_when(
    Cover == "Secondary Forest" ~ "SF",
    Cover == "Biodiverse pasture" ~ "BP",
    Cover == "Grass Monoculture" ~ "GM",
    TRUE ~ Cover  # Keep other values unchanged
  ))%>%
  mutate(Cover = factor(Cover, levels = c("SF", "BP", "GM")))

IndDB <-  glm(pH ~ FireRegime + Cover, data = GLMSoil2)

m1_emm <- emmeans(IndDB, specs = "Cover")
m1_pairs <- contrast(m1_emm,
                     method = "revpairwise",
                     adjust = "none") %>%
  summary(infer = TRUE) %>%
  data.table()

m1_pairs[ , p_pretty := pvalString(p.value)]
# also create a column with "p-val: "
m1_pairs[ , pval_pretty := paste("p = ", p_pretty)]
m1_pairs[ , estval_pretty := paste("Est = ", round(estimate, 3))]
m1_pairs[ , zval_pretty := paste("t = ", round(t.ratio, 3))]

contrast_order <- m1_pairs[, contrast]
m1_pairs[, contrast := factor(contrast, contrast_order)]

gg_effect <- ggplot(data = m1_pairs, 
                    aes(y = contrast,
                        x = estimate)) +
  # confidence level of effect
  geom_errorbar(aes(xmin = lower.CL, 
                    xmax = upper.CL),
                width = 0, 
                color = "black") +
  # estimate of effect
  geom_point(size = 3) +
  
  # draw a line at effect = 0
  geom_vline(xintercept = 0, linetype = 2) +
  
  # p-value. The y coordinates are set by eye
  annotate(geom = "text",
           label = m1_pairs$estval_pretty,
           y = 0.7:2.7,
           x = 2, size = 3.4) +
   annotate(geom = "text",
           label = m1_pairs$zval_pretty,
           y = 0.7:2.7,
           x = -3, size = 3.4) +
  annotate(geom = "text",
           label = m1_pairs$pval_pretty,
           y = 0.7:2.7,
           x = -2.25, size = 3.4) +
  
  # x-axis label and aesthetics
  xlab("Effect Vegetation Cover") +
  ylab("Contrast") +
  coord_cartesian(xlim = c(-3.1, 3.1)) +
  scale_x_continuous(position="top") +
  scale_y_discrete(position = "right")+
  theme(axis.text.y = element_text(size = 10))+
        theme(axis.title.y = element_text(size = 12))+
  theme(panel.border = element_blank(), panel.grid.major = element_blank(),
              panel.grid.minor = element_blank(), 
              axis.line = element_line(colour = "black"))+
        theme(panel.background = element_blank())

plotDB2 <- ggplot(GLMSoil, aes(x = Cover, y = pH))+
        geom_boxplot(width = 0.6, outlier.shape = NA)+
        geom_point(alpha = 0.3, 
             position=position_jitter(width = .2), color = "cyan4")+
        theme(axis.title.x = element_blank())+
        theme(axis.text.x = element_blank())+
        scale_y_continuous("pH")+
        xlab("Vegetation Cover")+
        theme(axis.text.x = element_text(size = 14))+
        theme(axis.title.x = element_text(size = 12))+
        theme(axis.text.y = element_text(size = 12))+
        theme(axis.title.y = element_text(size = 14))+
        theme(panel.border = element_blank(), panel.grid.major = element_blank(),
              panel.grid.minor = element_blank(), 
              axis.line = element_line(colour = "black"))+
        theme(panel.background = element_blank())+
        theme(legend.position = "bottom")+
  theme(legend.position = "none", axis.line.y = element_blank(),
        axis.title.y = element_blank(), axis.text.y = element_blank(),
        axis.ticks.y = element_blank())+
        annotate("text", label = "A", size = 4, x = 1, y = 6)+
        annotate("text", label = "A", size = 4, x = 2, y = 6.3)+
        annotate("text", label = "A", size = 4, x = 3, y = 6.7)

gg2 <- plot_grid(gg_effect,
                plotDB2,
                nrow = 2,
                align = "v",
                label_size = 9,
                axis = "rl",
                rel_heights=c(1, 4)
                )

plotTo <- plot_grid(gg,
                gg2,
                ncol = 2,
                align = "h",
                label_size = 9,
                axis = "rl",
                rel_widths = c(1, 1)
                )
plotTo
```

# Modelo Humedad

Analizaremos la cantidad de $outliers$ para la variable humedad

```{r }
boxplot.stats(GLMSoil$Humidity)$out
```

Para apoyar el análisis de datos, realizaremos un gráfico para poder observar la disposición de la distribución de los datos.

```{r message = FALSE, warning = FALSE, echo = FALSE, fig.width=10, fig.height=7}
plot1 <- GLMSoil |> 
  ggplot(aes(x = FireRegime, y = Humidity))+
  geom_boxplot()+
  theme_minimal(base_size = 15) +
  theme(panel.border = element_rect(fill = NA, colour = "grey40"))+
  theme(strip.text = element_text(face = "italic"))+
  theme(legend.position = "none")+
  geom_point(alpha = 0.3, 
             position=position_jitter(width = .2), color = "cyan4")

plot2 <- GLMSoil |> 
  ggplot(aes(x = Cover, y = Humidity))+
  geom_boxplot()+
  geom_point(alpha = 0.3, 
             position=position_jitter(width = .2), color = "cyan4")+
  theme_minimal(base_size = 15) +
  theme(panel.border = element_rect(fill = NA, colour = "grey40"))+
  theme(strip.text = element_text(face = "italic"))+
  theme(legend.position = "none", axis.line.y = element_blank(),
        axis.title.y = element_blank(), axis.text.y = element_blank(),
        axis.ticks.y = element_blank())

gg2 <- plot_grid(plot1,
                plot2,
                ncol = 2,
                label_size = 9,
                axis = "rl",
                rel_heights=c(1, 1))

gg2
```

Los gráficos cuantil cuantil *(quantile-quantile (qq))* son una ayuda para explorar si un conjunto de datos o muestra proviene de una población con cierta distribución, en nuestro caso, exploraremos algún comportamiento en relación con su sesgo y su distribución.

```{r message = FALSE, warning = FALSE, echo = FALSE, fig.width=10, fig.height=7}
# Convertimos la base de datos en una disposición larga
GLMSoills <- GLMSoil  |> 
  gather(Variable, Total, "Humidity") |> 
  as.data.frame()

GLMSoills |> 
  ggplot(aes(sample = Total), fill = Variable)+
  stat_qq() +
  stat_qq_line()+
  facet_wrap(.~ Variable, scales = "free")+
  theme_minimal(base_size = 15) +
  theme(panel.border = element_rect(fill = NA, colour = "grey40"))+
  theme(legend.position = "none")+
  xlab("Cuantiles teóricos")+
  ylab("Cuantiles de muestra")
```

## Relación entre el Humidity y el Régimen de quemas

### Modelo nulo

```{r}
nullHumidityDB <- glm(Humidity ~ 1, family = gaussian(),
             data = GLMSoil)
summary(nullHumidityDB)
```

### Modelo *Humidity \~ FireRegimen + Cover*

Luego procederemos a realizar un modelo entre las variables *Humidity* y *FireRegimen + Cover*. Esto con el fin de poder conocer una posible asociación entre las variables.

```{r }
HumidityDB <- glm(Humidity ~ FireRegime + Cover, family = gaussian(),
             data = GLMSoil)
summary(HumidityDB)
```

Sin embargo, vamos a validar el modelo de regresión a partir de los gráficos de los residuales.

```{r warning=FALSE, message=FALSE, echo=FALSE, fig.width=10, fig.height=7}
par(mfrow=c(2, 2))
plot(HumidityDB)
```

```{r }
shapiro.test(HumidityDB$residuals)
```

```{r }
result <-  fligner.test(Humidity ~ interaction(FireRegime, Cover), data = GLMSoil) 

print(result)
```

## Interpretación de los Resultados

Intercepto ($\beta_0$): 

FireRegimenLow ($\beta_1$): 

FireRegimenHigh ($\beta_2$): 

CoverBiodiverse pasture ($\beta_3$): 

FireRegimenLow ($\beta_4$): 

## Visualización

```{r echo=FALSE, fig.width=15, fig.height=12}
# Effect FireRegimen
GLMSoil2 <- GLMSoil %>%
  mutate(Cover = case_when(
    Cover == "Secondary Forest" ~ "SF",
    Cover == "Biodiverse pasture" ~ "BP",
    Cover == "Grass Monoculture" ~ "GM",
    TRUE ~ Cover  # Keep other values unchanged
  ))%>%
  mutate(Cover = factor(Cover, levels = c("SF", "BP", "GM")))

IndDB <-  glm(Humidity ~ FireRegime + Cover, data = GLMSoil2)


m1_emm <- emmeans(IndDB, specs = "FireRegime")
m1_pairs <- contrast(m1_emm,
                     method = "revpairwise",
                     adjust = "none") %>%
  summary(infer = TRUE) %>%
  data.table()

m1_pairs[ , p_pretty := pvalString(p.value)]
# also create a column with "p-val: "
m1_pairs[ , pval_pretty := paste("p = ", p_pretty)]
m1_pairs[ , estval_pretty := paste("Est = ", round(estimate, 3))]
m1_pairs[ , zval_pretty := paste("t = ", round(t.ratio, 3))]

contrast_order <- m1_pairs[, contrast]
m1_pairs[, contrast := factor(contrast, contrast_order)]

gg_effect <- ggplot(data = m1_pairs, 
                    aes(y = contrast,
                        x = estimate)) +
  # confidence level of effect
  geom_errorbar(aes(xmin = lower.CL, 
                    xmax = upper.CL),
                width = 0, 
                color = "black") +
  # estimate of effect
  geom_point(size = 3) +
  
  # draw a line at effect = 0
  geom_vline(xintercept = 0, linetype = 2) +
  
  # p-value. The y coordinates are set by eye
  annotate(geom = "text",
           label = m1_pairs$estval_pretty,
           y = 0.7:2.7,
           x = 2.3, size = 3.4) +
   annotate(geom = "text",
           label = m1_pairs$zval_pretty,
           y = 0.7:2.7,
           x = -3, size = 3.4) +
  annotate(geom = "text",
           label = m1_pairs$pval_pretty,
           y = 0.7:2.7,
           x = -1.85, size = 3.4) +
  
  # x-axis label and aesthetics
  xlab("Effect Fire Regime") +
  coord_cartesian(xlim = c(-3.1, 3.1)) +
  scale_y_discrete(position = "right")+
  scale_x_continuous(position="top") +
  theme(axis.title.y = element_blank())+
  theme(panel.border = element_blank(), panel.grid.major = element_blank(),
              panel.grid.minor = element_blank(), 
              axis.line = element_line(colour = "black"))+
        theme(panel.background = element_blank())+
  theme(axis.text.y = element_text(size = 10))

plotDB <- ggplot(GLMSoil2, aes(x = FireRegime, y = Humidity))+
        geom_boxplot(width = 0.6, outlier.shape = NA)+
        geom_point(alpha = 0.3, 
             position=position_jitter(width = .2), color = "cyan4")+
        theme(axis.title.x = element_blank())+
        theme(axis.text.x = element_blank())+
        scale_y_continuous("Humidity (%)")+
        xlab("Fire Regime")+
        theme(axis.text.x = element_text(size = 14))+
        theme(axis.title.x = element_text(size = 12))+
        theme(axis.text.y = element_text(size = 12))+
        theme(axis.title.y = element_text(size = 14))+
        theme(panel.border = element_blank(), panel.grid.major = element_blank(),
              panel.grid.minor = element_blank(), 
              axis.line = element_line(colour = "black"))+
        theme(panel.background = element_blank())+
        theme(legend.position = "bottom")+
        annotate("text", label = "A", size = 4, x = 1, y = 45)+
        annotate("text", label = "A", size = 4, x = 2, y = 45)+
        annotate("text", label = "A", size = 4, x = 3, y = 50)

gg <- plot_grid(gg_effect,
                plotDB,
                nrow = 2,
                align = "v",
                label_size = 9,
                axis = "rl",
                rel_heights=c(1, 4)
                )
```

```{r echo=FALSE, fig.width=15, fig.height=12}
# Effect Cover
GLMSoil2 <- GLMSoil %>%
  mutate(Cover = case_when(
    Cover == "Secondary Forest" ~ "SF",
    Cover == "Biodiverse pasture" ~ "BP",
    Cover == "Grass Monoculture" ~ "GM",
    TRUE ~ Cover  # Keep other values unchanged
  ))%>%
  mutate(Cover = factor(Cover, levels = c("SF", "BP", "GM")))

IndDB <-  glm(Humidity ~ FireRegime + Cover, data = GLMSoil2)

m1_emm <- emmeans(IndDB, specs = "Cover")
m1_pairs <- contrast(m1_emm,
                     method = "revpairwise",
                     adjust = "none") %>%
  summary(infer = TRUE) %>%
  data.table()

m1_pairs[ , p_pretty := pvalString(p.value)]
# also create a column with "p-val: "
m1_pairs[ , pval_pretty := paste("p = ", p_pretty)]
m1_pairs[ , estval_pretty := paste("Est = ", round(estimate, 3))]
m1_pairs[ , zval_pretty := paste("t = ", round(t.ratio, 3))]

contrast_order <- m1_pairs[, contrast]
m1_pairs[, contrast := factor(contrast, contrast_order)]

gg_effect <- ggplot(data = m1_pairs, 
                    aes(y = contrast,
                        x = estimate)) +
  # confidence level of effect
  geom_errorbar(aes(xmin = lower.CL, 
                    xmax = upper.CL),
                width = 0, 
                color = "black") +
  # estimate of effect
  geom_point(size = 3) +
  
  # draw a line at effect = 0
  geom_vline(xintercept = 0, linetype = 2) +
  
  # p-value. The y coordinates are set by eye
  annotate(geom = "text",
           label = m1_pairs$estval_pretty,
           y = 0.7:2.7,
           x = 2, size = 3.4) +
   annotate(geom = "text",
           label = m1_pairs$zval_pretty,
           y = 0.7:2.7,
           x = -3, size = 3.4) +
  annotate(geom = "text",
           label = m1_pairs$pval_pretty,
           y = 0.7:2.7,
           x = -2.25, size = 3.4) +
  
  # x-axis label and aesthetics
  xlab("Effect Vegetation Cover") +
  ylab("Contrast") +
  coord_cartesian(xlim = c(-3.1, 3.1)) +
  scale_x_continuous(position="top") +
  scale_y_discrete(position = "right")+
  theme(axis.text.y = element_text(size = 10))+
        theme(axis.title.y = element_text(size = 12))+
  theme(panel.border = element_blank(), panel.grid.major = element_blank(),
              panel.grid.minor = element_blank(), 
              axis.line = element_line(colour = "black"))+
        theme(panel.background = element_blank())

plotDB2 <- ggplot(GLMSoil2, aes(x = Cover, y = Humidity))+
        geom_boxplot(width = 0.6, outlier.shape = NA)+
        geom_point(alpha = 0.3, 
             position=position_jitter(width = .2), color = "cyan4")+
        theme(axis.title.x = element_blank())+
        theme(axis.text.x = element_blank())+
        scale_y_continuous("Humidity (%)")+
        xlab("Vegetation Cover")+
        theme(axis.text.x = element_text(size = 14))+
        theme(axis.title.x = element_text(size = 12))+
        theme(axis.text.y = element_text(size = 12))+
        theme(axis.title.y = element_text(size = 14))+
        theme(panel.border = element_blank(), panel.grid.major = element_blank(),
              panel.grid.minor = element_blank(), 
              axis.line = element_line(colour = "black"))+
        theme(panel.background = element_blank())+
        theme(legend.position = "bottom")+
  theme(legend.position = "none", axis.line.y = element_blank(),
        axis.title.y = element_blank(), axis.text.y = element_blank(),
        axis.ticks.y = element_blank())+
        annotate("text", label = "A", size = 4, x = 1, y = 46)+
        annotate("text", label = "A", size = 4, x = 2, y = 47)+
        annotate("text", label = "A", size = 4, x = 3, y = 40)

gg2 <- plot_grid(gg_effect,
                plotDB2,
                nrow = 2,
                align = "v",
                label_size = 9,
                axis = "rl",
                rel_heights=c(1, 4)
                )

plotTo <- plot_grid(gg,
                gg2,
                ncol = 2,
                align = "h",
                label_size = 9,
                axis = "rl",
                rel_widths = c(1, 1)
                )
plotTo
```
